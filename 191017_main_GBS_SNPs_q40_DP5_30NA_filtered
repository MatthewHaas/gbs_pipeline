# 16 and 17 October 2019
# WD: /home/jkimball/haasx092/main_GBS
# When I switched to R: /home/jkimball/haasx092/main_GBS/191016_samtools

module load samtools
module load bcftools
module load parallel
module load htslib

bams="190919_sorted_bams_partial.txt"
prefix="191016_samtools"
parallel_samtools_processes=15
ref="/home/jkimball/mshao/genome_seq/zizania_palustris_13Nov2018_okGsv.fasta"

mkdir -p $prefix
cut -f 1 ${ref}.fai \
 | parallel --will-cite -I'{}' -j $parallel_samtools_processes \
  \(samtools mpileup -q 40 -gDVu \
  -b $bams \
  -r '{}' \
  -f ${ref} \
  \| bcftools call -cv \
  \| bgzip -c \
  \> $prefix/${prefix}_'{}'.vcf.gz \) \
  2\> $prefix/${prefix}_'{}'.err

# Filter data by read depth before loading into R (otherwise, it will crash) 
awk '{ if ($8 >= 5) {print}}' 191017_main_GBS_subset_q40.tsv > 191017_main_GBS_SNPs_filt_by_depth.tsv  

# R code
library(data.table)
library(reshape2)
fread("191017_main_GBS_SNPs_filt_by_depth.tsv") -> x

# Read in the data, give column names, and remove a unnecessary/empty column
setnames(x, c("scaffold", "position", "ref", "alt", "quality", "sample", "GT", "V8", "DP", "DV"))
x[, V8 := NULL]

# Clean up sample names by stripping the "relative path" style, leaving only the sample name.
# The sample names will be turned into column names for part of the analysis, so this will make it cleaner.
x[, sample := sub("/.+$", "", sample)]

dcast(x, scaffold + position ~ sample, value.var="GT") -> y
# Put back into data table format
y <- as.data.table(y)

# Trim scaffold names (drop the HRSCAF part)
y[, scaffold := sub(";.+$", "", scaffold)]

scaffolds_of_interest = c("Scaffold_1", "Scaffold_3", "Scaffold_9", "Scaffold_13", "Scaffold_18", "Scaffold_48", "Scaffold_51", "Scaffold_70", "Scaffold_93", "Scaffold_415", "Scaffold_693", "Scaffold_1062", "Scaffold_1063", "Scaffold_1064", "Scaffold_1065")

y[scaffold %in% scaffolds_of_interest] -> yy

# Save data (the next step also has caused R to crash)
save(x, y, yy, file="191017_main_GBS_200_samples_q40_DP5_filtered.Rdata")

write.csv(yy, file="191017_main_GBS_200_samples_q40_DP5_filtered.csv", col.names=TRUE, row.names=FALSE)

# Count the number of "NA" occurrences per row
yy[, sum := apply(yy, MARGIN=1, function(x) sum(is.na(x)))]

# Select rows (SNPs) with fewer than 70 missing data points (# of samples missing that SNP)
yy[sum < 70] -> z