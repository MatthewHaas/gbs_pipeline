# 27 September 2019
# WD: /home/jkimball/haasx092/umgc_pilot_study

# Convert vcf to plink format (using plink version 1.9)
module load plink
plink --vcf variants_filt_2M.vcf.gz --maf 0.05 --allow-extra-chr --recode --out myplink

# Identity-by-state (IBS)
# For the N individuals in a sample, to create an N x N matrix of genome-wide average IBS pairwise identities (http://zzz.bwh.harvard.edu/plink/strat.shtml)
# output is in "plink.mibs"
plink --file myplink --allow-extra-chr --cluster --matrix

module load R/3.6.0

library(data.table)

# Read in data
fread("plink.mibs") -> x

# Set the column names (same as the VCF file and given in the file plink.mibs.ids
setnames(x, c("14S-PS", "FY-C20", "GarfieldLake", "Itasca-C12", "NecktieRiver", "PM3E", "UpperRiceLake"))

# Set row (sample) names (same order as above)
x[, sample := c("14S-PS", "FY-C20", "GarfieldLake", "Itasca-C12", "NecktieRiver", "PM3E", "UpperRiceLake")]

# Change the column order so that the samples are first
setcolorder(x, c("sample","14S-PS", "FY-C20", "GarfieldLake", "Itasca-C12", "NecktieRiver", "PM3E", "UpperRiceLake"))

# Write to a CSV file
write.csv(x, file="190927_umgc_pilot_IBS_table_from_plink.csv", row.names=FALSE, col.names=TRUE)

# Save data
save(x, file="190927_umgc_pilot_IBS_table_from_plink.Rdata")

# 30 September 2019 started here
library(data.table) # re-loaded data table (new R session)
load("190927_umgc_pilot_IBS_table_from_plink.Rdata") # load data from Friday

# Remove sample FY-C20
x[sample != "FY-C20"] -> y # Remove the row containing FY-C20
y[, "FY-C20" := NULL] # remove the column for FY-C20

# Re-order columns so that breeding lines and natural stands are grouped together (rather than how they were organized in the file system).
setcolorder(y, c("sample", "14S-PS", "PM3E", "Itasca-C12", "GarfieldLake", "NecktieRiver", "UpperRiceLake"))

# Make a column to help re-organize rows so it matches the order of columns...
y[, order := c(1, 4, 3,5,2,6)]

# Set the order according to the way want it to appear in the paper.. same as the column order
setorder(y, by="order")

# Save new IBS table
write.csv(y, file="190930_umgc_pilot_IBS_table_from_plink.csv", row.names=FALSE, col.names=TRUE)

# Save updated R data
save(x,y, file="190930_umgc_pilot_IBS_table_from_plink.Rdata")

# Back on the command line:

# Find PCAs using plink (version 1.9)
module load plink
plink --vcf variants_filt_0.5M.vcf.gz --maf 0.05 --allow-extra-chr --recode --out myplink_0.5M
plink --vcf variants_filt_1M.vcf.gz --maf 0.05 --allow-extra-chr --recode --out myplink_1M
plink --vcf variants_filt_2M.vcf.gz --maf 0.05 --allow-extra-chr --recode --out myplink_2M
plink --vcf variants_filt_4M.vcf.gz --maf 0.05 --allow-extra-chr --recode --out myplink_4M
plink --vcf variants_filt_7M.vcf.gz --maf 0.05 --allow-extra-chr --recode --out myplink_7M

plink --pca --file myplink_0.5M --allow-extra-chr -out myplink_0.5M
plink --pca --file myplink_1M --allow-extra-chr -out myplink_1M
plink --pca --file myplink_2M --allow-extra-chr -out myplink_2M
plink --pca --file myplink_4M --allow-extra-chr -out myplink_4M
plink --pca --file myplink_7M --allow-extra-chr -out myplink_7M

# Move back to R:
# Note: this next section is not very elegant. It was done like this to make it a little clearer what I was doing.. Hopefully.
# Maybe I should come back later and make it look a little cleaner (even if it is understandable in this form).
# Load required package
library(data.table)

# Read in eigenvectors to plot PCA
a <- fread("myplink_0.5M.eigenvec")
b <- fread("myplink_1M.eigenvec")
c <- fread("myplink_2M.eigenvec")
d <- fread("myplink_4M.eigenvec")
e <- fread("myplink_7M.eigenvec")

# Remove column 2 (redundant)
a[, V2 := NULL]
b[, V2 := NULL]
c[, V2 := NULL]
d[, V2 := NULL]
e[, V2 := NULL]


# set column names
setnames(a, c("sample", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7"))
setnames(b, c("sample", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7"))
setnames(c, c("sample", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7"))
setnames(d, c("sample", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7"))
setnames(e, c("sample", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7"))

# Remove sample FY-C20 
a[sample != "FY.C20"] -> a
b[sample != "FY.C20"] -> b
c[sample != "FY.C20"] -> c
d[sample != "FY.C20"] -> d
e[sample != "FY.C20"] -> e

# Set desired plotting characters for each accession
a[, pch := c(4,8,15,16,17,18)]
b[, pch := c(4,8,15,16,17,18)]
c[, pch := c(4,8,15,16,17,18)]
d[, pch := c(4,8,15,16,17,18)]
e[, pch := c(4,8,15,16,17,18)]

# Set color of each point according to improvement status (cultivated vs. natural stand)
a[sample == "14S.PS" | sample == "PM3E" | sample == "Itasca.C12", col := 1]
a[sample == "GarfieldLake" | sample == "NecktieLake" | sample == "UpperRiceLake", col := 2]

b[sample == "14S.PS" | sample == "PM3E" | sample == "Itasca.C12", col := 1]
b[sample == "GarfieldLake" | sample == "NecktieLake" | sample == "UpperRiceLake", col := 2]

c[sample == "14S.PS" | sample == "PM3E" | sample == "Itasca.C12", col := 1]
c[sample == "GarfieldLake" | sample == "NecktieLake" | sample == "UpperRiceLake", col := 2]

d[sample == "14S.PS" | sample == "PM3E" | sample == "Itasca.C12", col := 1]
d[sample == "GarfieldLake" | sample == "NecktieLake" | sample == "UpperRiceLake", col := 2]

e[sample == "14S.PS" | sample == "PM3E" | sample == "Itasca.C12", col := 1]
e[sample == "GarfieldLake" | sample == "NecktieLake" | sample == "UpperRiceLake", col := 2]

# Read in eigenvalues (to determine % variation explained by each PC)
v <- fread("myplink_0.5M.eigenval")
w <- fread("myplink_1M.eigenval")
x <- fread("myplink_2M.eigenval")
y <- fread("myplink_4M.eigenval")
z <- fread("myplink_7M.eigenval")

# Calculate percent variation (note: I didn't bother renaming the columns to something informative since there is only one)
percentVar_a = c(PC1=v[1, V1] / sum(v$V1), PC2=v[2, V1] / sum(v$V1))
percentVar_b = c(PC1=w[1, V1] / sum(w$V1), PC2=w[2, V1] / sum(w$V1))
percentVar_c = c(PC1=x[1, V1] / sum(x$V1), PC2=x[2, V1] / sum(x$V1))
percentVar_d = c(PC1=y[1, V1] / sum(y$V1), PC2=y[2, V1] / sum(y$V1))
percentVar_e = c(PC1=z[1, V1] / sum(z$V1), PC2=z[2, V1] / sum(z$V1))

# Make the plot
pdf("190930_PCA_plots_from_umgc_pilot_study.pdf", height=12, width=16)
layout(matrix(1:6, ncol=3, byrow=T), widths=c(2,2,2))
a[, plot(PC1, PC2, xlab=paste0("PC1: ", round(percentVar_a[1]*100), "%"), ylab=paste0("PC2: ", round(percentVar_a[2]*100), "%"), main="0.5M reads", pch=pch, col=col, cex=1.5, yaxt='n')]
axis(2, las=1)
b[, plot(PC1, PC2, xlab=paste0("PC1: ", round(percentVar_b[1]*100), "%"), ylab=paste0("PC2: ", round(percentVar_b[2]*100), "%"), main="1M reads", pch=pch, col=col, cex=1.5, yaxt='n')]
axis(2, las=1)
c[, plot(PC1, PC2, xlab=paste0("PC1: ", round(percentVar_c[1]*100), "%"), ylab=paste0("PC2: ", round(percentVar_c[2]*100), "%"), main="2M reads", pch=pch, col=col, cex=1.5, yaxt='n')]
axis(2, las=1)
d[, plot(PC1, PC2, xlab=paste0("PC1: ", round(percentVar_d[1]*100), "%"), ylab=paste0("PC2: ", round(percentVar_d[2]*100), "%"), main="4M reads", pch=pch, col=col, cex=1.5, yaxt='n')]
axis(2, las=1)
e[, plot(PC1, PC2, xlab=paste0("PC1: ", round(percentVar_e[1]*100), "%"), ylab=paste0("PC2: ", round(percentVar_e[2]*100), "%"), main="7M reads", pch=pch, col=col, cex=1.5, yaxt='n')]
axis(2, las=1)
par(oma=c(0,0,0,0))
legend("topright", inset=c(0.4,0), legend=c("14S-PS", "PM3E", "Itasca-C12", "Garfield Lake", "Necktie River", "Upper Rice Lake"), pch=c(4, 17, 15, 8, 16, 18), col=c(1,1,1,2,2,2), cex=1.5, bty='n')
dev.off()

# Make csv files containing the PCA coordinates for Jenny
write.csv(a, file="190930_coordinates_for_PCA_0.5M.csv", row.names=FALSE, col.names=TRUE)
write.csv(b, file="190930_coordinates_for_PCA_1M.csv", row.names=FALSE, col.names=TRUE)
write.csv(c, file="190930_coordinates_for_PCA_2M.csv", row.names=FALSE, col.names=TRUE)
write.csv(d, file="190930_coordinates_for_PCA_4M.csv", row.names=FALSE, col.names=TRUE)
write.csv(e, file="190930_coordinates_for_PCA_7M.csv", row.names=FALSE, col.names=TRUE)

# Save the data...
save(a, b, c, d, e, v, w, x, y, z, percentVar_a, percentVar_b, percentVar_c, percentVar_d, percentVar_e, file="190930_pca_from_link_data_and_plots.Rdata")